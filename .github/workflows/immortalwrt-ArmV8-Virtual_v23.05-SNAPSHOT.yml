#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Compile immortalwrt-ArmV8-Virtual_v23.05-SNAPSHOT

# UTC时间每月1日08:05开始运行，北京时间:+8，即16:05(排队会有延迟)
on:
  schedule:
    - cron: 05 8 1 * *
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: ArmV8_Virtual/feeds.conf.default
  CONFIG_FILE: ArmV8_Virtual/diffconfig_v23.05-SNAPSHOT
  DIY_P1_SH: ArmV8_Virtual/diy-part01.sh
  DIY_P2_SH: ArmV8_Virtual/diy-part02.sh

  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout 检出Code
      uses: actions/checkout@main
#
#    - name: Show system 检查CPU是否为8370C
#      run: |
#        echo -e "Total CPU cores\t: $(nproc)"
#        cat /proc/cpuinfo | grep 'model name'
#        cpu_name=$(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')
#        if [[ ! "$cpu_name" =~ "8370C" ]]; then
#        echo "CPU不为8370C，性能不足，暂停编译"
#        exit 1
#        else
#        echo "CPU为8370C，继续编译"
#        ulimit -a
#        fi
#
    - name: Initialization environment 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -yqq update
        docker rmi $(docker images -q)
        sudo -E apt -yqq purge azure* docker* dotnet* firefox* ghc* google* llvm* mongodb* mysql* openjdk* php* powershell* snap* zulu*
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E rm -rf /etc/apt/sources.list.d* /usr/local/lib/android* /etc/docker* /etc/firefox* /etc/mysql* /etc/php* /opt/google* /usr/share/dotnet* /usr/share/google* /usr/share/moby* /usr/share/mysql* /usr/share/php*
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler dos2unix ecj fakeroot fastjar flex g++-multilib gawk gcc-multilib gettext git gnutls-dev gperf haveged help2man intltool jq lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool libyaml-dev libz-dev lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-docutils python3-pip python3-ply python3-pyelftools qemu-utils quilt re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs unzip upx-ucl vim wget xmlto xxd zlib1g-dev clang
        sudo -E apt -yqq clean
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"

        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: Clone source code 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds 加载自定义feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds 更新feeds
      run: cd openwrt && ./scripts/feeds update -a -f

    - name: Install feeds 安装feeds
      run: cd openwrt && ./scripts/feeds install -a -f

    - name: Load custom configuration 加载自定义配置config及files
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        cp -rf $GITHUB_WORKSPACE/PATCH/files .
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions SSH连接
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package 下载dl包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) || make download -j1 V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware 编译固件
      id: compile
      run: |
        cd openwrt
        df -hT $PWD
        echo -e $(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')
        echo -e "$(nproc) thread compile | $(nproc) 线程编译"
        make -j$(nproc) || make -j1 || make -j1 V=s

        echo "status=success" >> $GITHUB_OUTPUT

    - name: Organize files 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        df -hT
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_DEVICE.*=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        sed -nE 's/.*(192.168\.[0-9]+\.[0-9]+).*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
        [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        echo "UPLOAD_DATE=$(date +"%Y.%m.%d-%H:%M")" >> $GITHUB_ENV

        cd bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware 上传编译资产
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_${{ env.DEVICE_NAME }}_${{ env.TAG_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload Release 上传,发布固件
      uses: softprops/action-gh-release@master
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{env.DEVICE_NAME}}_${{env.TAG_DATE}}
        files: ${{ env.FIRMWARE }}/*
        body: |
          源码: ${{env.REPO_URL}}
          分支: ${{env.REPO_BRANCH}}
          平台: ${{env.DEVICE_NAME}}
          LAN: ${{env.IP_ADDR}}
          时间: ${{env.UPLOAD_DATE}} CST-8

    - name: Remove old Releases 删除旧版Release (只保留5个)
      uses: dev-drprasad/delete-older-releases@master
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        keep_latest: 5
        delete_tags: true

    - name: Delete workflow runs 删除工作流 (较旧的保留3天)
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 1